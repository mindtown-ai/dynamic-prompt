{
  "name": "dynamic-prompt",
  "type": "registry:block",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "select"
  ],
  "files": [
    {
      "path": "components/dynamic-prompt.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport React, { useRef, useState, useEffect, ChangeEvent } from \"react\";\nimport {\n  Select as DefaultSelect,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface TextPart {\n  type: \"text\" | \"select\";\n  key?: string;\n  value: string;\n}\n\nfunction parseText(text: string): TextPart[] {\n  const regex = /\\{([^}]+)\\}/g;\n  const parts: TextPart[] = [];\n  let lastIndex = 0;\n  let match: RegExpExecArray | null;\n\n  while ((match = regex.exec(text)) !== null) {\n    if (match.index > lastIndex) {\n      parts.push({ type: \"text\", value: text.slice(lastIndex, match.index) });\n    }\n    parts.push({ type: \"select\", key: match[1], value: \"\" });\n    lastIndex = regex.lastIndex;\n  }\n\n  if (lastIndex < text.length) {\n    parts.push({ type: \"text\", value: text.slice(lastIndex) });\n  }\n\n  return parts;\n}\n\nfunction reconstructText(textParts: TextPart[]): string {\n  return textParts\n    .map((part) => {\n      if (part.type === \"text\" || part.type === \"select\") {\n        return part.value;\n      } else {\n        return `{${part.key}}`;\n      }\n    })\n    .join(\"\");\n}\n\ninterface DynamicTextFieldProps {\n  onChange: (text: string) => void;\n  CustomSelect?: React.ComponentType<any>;\n  data: { text: string; options: { [key: string]: string[] } };\n}\n\nconst DynamicTextField: React.FC<DynamicTextFieldProps> = ({\n  onChange,\n  CustomSelect,\n  data,\n}) => {\n  const [textParts, setTextParts] = useState<TextPart[]>(parseText(data.text));\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n  const spanRefs = useRef<(HTMLSpanElement | null)[]>([]);\n\n  const handleTextChange = (\n    index: number,\n    e: ChangeEvent<HTMLInputElement>\n  ) => {\n    const newTextParts = [...textParts];\n    newTextParts[index].value = e.target.value;\n    setTextParts(newTextParts);\n    onChange(reconstructText(newTextParts));\n  };\n\n  const handleSelectChange = (index: number, value: string) => {\n    const newTextParts = [...textParts];\n    newTextParts[index].value = value;\n    console.log(newTextParts);\n    setTextParts(newTextParts);\n    onChange(reconstructText(newTextParts));\n  };\n\n  useEffect(() => {\n    textParts.forEach((part, index) => {\n      if (part.type === \"text\" && spanRefs.current[index]) {\n        spanRefs.current[index]!.textContent = part.value;\n        inputRefs.current[index]!.style.width = `${\n          spanRefs.current[index]!.offsetWidth\n        }px`;\n      }\n    });\n  }, [textParts]);\n\n  const SelectComponent: React.ComponentType<any> =\n    CustomSelect || DefaultSelect;\n\n  const setRef =\n    (\n      index: number,\n      refs: (HTMLSpanElement | null)[] | (HTMLInputElement | null)[]\n    ) =>\n    (el: HTMLSpanElement | HTMLInputElement | null) => {\n      if (!el || !refs) return;\n      refs[index] = el;\n    };\n\n  return (\n    <div className=\"flex flex-wrap items-center gap-2\">\n      {textParts.map((part, index) =>\n        part.type === \"text\" ? (\n          <div key={index} className=\"relative\">\n            <input\n              ref={setRef(index, inputRefs.current)}\n              type=\"text\"\n              value={part.value}\n              onChange={(e) => handleTextChange(index, e)}\n              className=\"outline-none bg-transparent min-w-0\"\n              style={{ width: \"fit-content\" }}\n            />\n            <span\n              ref={setRef(index, spanRefs.current)}\n              className=\"absolute invisible whitespace-pre\"\n            >\n              {part.value}\n            </span>\n          </div>\n        ) : (\n          <SelectComponent\n            key={index}\n            onValueChange={(value: string) => handleSelectChange(index, value)}\n            options={data.options[part.key!]}\n            placeholder={`Select ${part.key}`}\n          >\n            {CustomSelect ? null : (\n              <>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder={`Select ${part.key}`} />\n                </SelectTrigger>\n                <SelectContent>\n                  {data.options[part.key!].map((option) => (\n                    <SelectItem key={option} value={option}>\n                      {option}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </>\n            )}\n          </SelectComponent>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default DynamicTextField;\n"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {
    "importSpecifier": "DynamicPrompt",
    "moduleSpecifier": "@/components/dynamic-prompt"
  }
}